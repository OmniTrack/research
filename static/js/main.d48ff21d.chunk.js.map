{"version":3,"sources":["assets/omnitrack_for_research_logo.svg","assets/github.svg","assets/author_bongshin.png","assets/choe_portrait.png","assets/jseo_portrait.jpg","assets/yhkim_portrait.jpg","Header.tsx","Section.tsx","team/Team.tsx","publication/Publication.tsx","getting-started/GettingStarted.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","navProps","className","smooth","activeClassName","Header","props","id","src","logo","to","href","target","require","Section","hashId","title","children","blee","name","affiliation","email","web","thumb","echoe","jseo","team","Team","map","member","key","papers","authors","description","doi","Publication","p","Paper","GettingStarted","App","basename","hashType","Boolean","window","location","hostname","match","smoothscroll","polyfill","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d48ff21d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/omnitrack_for_research_logo.3e1b6952.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.ad26b199.svg\";","module.exports = __webpack_public_path__ + \"static/media/author_bongshin.d29b39dc.png\";","module.exports = __webpack_public_path__ + \"static/media/choe_portrait.8530d3d4.png\";","module.exports = __webpack_public_path__ + \"static/media/jseo_portrait.6543c1d1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/yhkim_portrait.cb5d642b.jpg\";","import React from 'react';\nimport './Header.scss';\nimport { NavHashLink as Link } from 'react-router-hash-link';\n\nimport logo from './assets/omnitrack_for_research_logo.svg';\n\nconst navProps = {\n    className: 'gnb-link',\n    smooth: true,\n    activeClassName: \"selected\"\n}\n\nexport const Header = (props: {}) => {\n    return <header>\n        <img id=\"logo\" src={logo} />\n\n        <div className=\"flex-fill\" />\n        <Link {...navProps} to=\"features\">Features</Link>\n        <Link {...navProps} to=\"getting-started\">Getting Started</Link>\n        <Link {...navProps}  to=\"publication\">Publication</Link>\n        <Link {...navProps}  to=\"team\">Team</Link>\n\n\n        <a className=\"github\" href=\"https://github.com/OmniTrack/omnitrack_for_research\" target=\"_blank\">\n            <div>\n                <img src={require('./assets/github.svg')}/>\n                <span>Github</span>\n            </div>\n        </a>\n\n    </header>\n}","import React from 'react';\n\nexport const Section = (props: {\n    title: string,\n    hashId: string,\n    children?: any\n}) => {\n    return <>\n        <a className=\"anchor\" id={props.hashId}/>\n        <div className=\"container\">\n            <h1>{props.title}</h1>\n            <div className=\"section-content\">\n                {props.children}\n            </div>\n        </div>\n        </>\n}","import React from 'react';\nimport './Team.scss';\nimport { Section } from '../Section';\n\nconst blee = {\n    name: \"Bongshin Lee\",\n    title: \"Sr. Principal Researcher\",\n    affiliation: \"Microsoft Research\",\n    email: \"bongshin (at) microsoft.com\",\n    web: \"http://bongshiny.com\",\n    thumb: require(\"../assets/author_bongshin.png\")\n}\n\nconst echoe = {\n    name: \"Eun Kyoung Choe\",\n    title: \"Assistant Professor\",\n    affiliation: \"University of Maryland\",\n    email: \"choe (at) umd.edu\",\n    web: \"http://eunkyoungchoe.com\",\n    thumb: require(\"../assets/choe_portrait.png\")\n}\n\nconst jseo = {\n    name: \"Jinwook Seo\",\n    title: \"Professor\",\n    affiliation: \"Seoul Nat'l University\",\n    email: \"jseo (at) snu.ac.kr\",\n    web: \"http://hcil.snu.ac.kr/people/jinwook-seo\",\n    thumb: require(\"../assets/jseo_portrait.jpg\")\n}\n\nconst yhkim = {\n    name: \"Young-Ho Kim\",\n    title: \"Postdoc\",\n    affiliation: \"University of Maryland\",\n    email: \"yghokim (at) umd.edu\",\n    web: \"http://younghokim.net\",\n    thumb: require(\"../assets/yhkim_portrait.jpg\")\n}\n\n\nconst team = [yhkim, blee, jseo, echoe]\n\nexport const Team = () => {\n    return <Section title=\"The OmniTrack Team\" hashId=\"team\">\n        <div className=\"members\">\n            {\n                team.map(member => {\n                    return <div key={member.email} className=\"member\">\n\n                        <a href={member.web} target=\"_blank\">\n                            <div className=\"member_content\">\n                                <div className=\"thumb\">\n                                    <img src={member.thumb} />\n                                </div>\n                                <div className=\"information\">\n                                    <div className=\"name\">\n                                        {member.name}\n                                    </div>\n                                    <div className=\"description\">\n                                        {member.title}<br />\n                                        {member.affiliation}<br />\n                                        <span className=\"email\">\n                                            {member.email}\n                                        </span>\n                                    </div>\n                                </div>\n                            </div>\n                        </a>\n                    </div>\n                })\n            }\n        </div>\n    </Section>\n}","import React from 'react';\nimport { Section } from '../Section';\nimport './Publication.scss';\n\n\nconst papers = [\n    {\n        authors: \"Eunkyung Jo, Austin L. Toombs, Colin M. Gray, and Hwajung Hong\",\n        title: \"Understanding Parenting Stress through Co-designed Self-Trackers\",\n        description: \"ACM CHI 2020. Pages 1–13.\",\n        doi: \"https://doi.org/10.1145/3313831.3376359\"\n    },\n    {\n        authors: \"Young-Ho Kim, Eun Kyoung Choe, Bongshin  Lee, and Jinwook Seo\",\n        title: \"Understanding Personal Productivity: How Knowledge Workers Define, Evaluate, and Reflect on Their Productivity\",\n        description: \"ACM CHI 2019. Pages 1–12.\",\n        doi: \"https://doi.org/10.1145/3290605.3300845\"\n    },\n\n    {\n        authors: \"Sung-In Kim, Eunkyung Jo, Myeonghan Ryu, Inha Cha, Young-Ho Kim, Heejeong Yoo, and Hwajung Hong\",\n        title: \"Toward Becoming a Better Self: Understanding Self-Tracking Experiences of Adolescents with Autism Spectrum Disorder Using Custom Trackers\",\n        description: \"EAI PervasiveHealth 2019. Pages 169–178.\",\n        doi: \"https://doi.org/10.1145/3329189.3329209\"\n    }\n\n]\n\nexport const Publication = () => {\n    return <Section title=\"Publication\" hashId=\"publication\">\n        <h3 className=\"margin-bottom-1rem\">Published Studies Conducted Using OmniTrack for Research</h3>\n        {\n            papers.map(p => {\n                return <Paper\n                    key={p.title}\n                    {...p}\n                />\n            })\n        }\n    </Section>\n}\n\n\nconst Paper = (props: {\n    authors: string,\n    title: string,\n    description: string,\n    doi?: string\n}) => {\n    return <div className=\"publication-info paragraph\">\n        <div className=\"authors\">{props.authors}</div>\n        <div className=\"title\"><b>{props.title}</b></div>\n        <div>\n            {props.description}\n            {\n                props.doi != null ? <a className=\"doi\" href={props.doi} target=\"_blank\">DOI</a> : null\n            }\n        </div>\n\n    </div>\n}","import React from 'react';\nimport { Section } from '../Section';\n\nexport const GettingStarted = () => {\n    return <Section title=\"Getting Started\" hashId=\"getting-started\">\n\n        <h4>Installation</h4>\n        <p>OmniTrack for Research is free and open-source platform. Due to the ethical reasons, we allowed researchers to set up their own platform instance on the storage they want (e.g., cloud server or a machine in the lab). By following our installation guide, a researcher without technical proficiency can setup and build their first experiment app within 2 hours.</p>\n\n\n        <div className=\"paragraph\">\n            <a href=\"https://github.com/OmniTrack/omnitrack_for_research/wiki\" target=\"_blank\">Official Documentation</a>\n        </div>\n\n        <div className=\"paragraph\">\n            If you don't have a local server machine, try this guide (<a href=\"https://github.com/OmniTrack/omnitrack_for_research/wiki/Setting-up-an-Azure-server\" target=\"_blank\">Setting up an Azure Server</a>) to setup an Azure VM with free credit provided to the first-time users.\n        </div>\n\n        <h4>System Requirements</h4>\n\n        <h5>Researcher Dashboard (Server)</h5>\n        <ul>\n            <li>Node.JS</li>\n            <li>RAM >= 1Gb</li>\n        </ul>\n\n        <h5>Participant App</h5>\n        <ul>\n            <li>Minimum OS level: <b>Android Kitkat</b> (API 19). <span className=\"warning\"><b>iOS</b> is NOT supported for now.</span></li>\n            <li>The device must support Google Play Service (Google is not supported in several regions including <span className=\"warning\">China</span>)</li>\n        </ul>\n\n\n    </Section>\n}","import React from 'react';\nimport {\n  HashRouter as Router,\n} from \"react-router-dom\";\nimport './App.scss';\nimport { Header } from './Header';\nimport { Team } from './team/Team';\nimport { Publication } from './publication/Publication';\nimport { GettingStarted } from './getting-started/GettingStarted';\n\nfunction App() {\n  return (\n    <Router basename=\"/\" hashType=\"noslash\">\n      <div className=\"App\">\n        <Header />\n        <div id=\"content\">\n          <GettingStarted/>\n          <Publication />\n          <Team />\n\n          <div id=\"footer\">\n            <div id=\"footer_content\">\n              Copyright © 2018-2020 The OmniTrack Team. All Rights Reserved.\n          </div>\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport smoothscroll from 'smoothscroll-polyfill';\n\n// kick off the polyfill!\nsmoothscroll.polyfill();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}